{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs24 \cf0 \expnd0\expndtw0\kerning0
so okay clusters: This is based on what I was told, heard around, or have seen on the computer. The point of this cluster and software combination is to optimize performance to a point of it being an actual joke on hardware that is refurbished or like beagle boards. and then you can buy the cheapest possible computers and share computing costs\
\
\pard\pardeftab720\sl320

\f1 \cf0 \expnd0\expndtw0\kerning0
so like you and 20-50 of your friends build a cluster of the following dimensions and then your personal computer can just be a POS because you\'92ll have access to a cheap and good super computer that may end up costing 2500 (50 dollars a piece for a computer is a good deal)\
\
So the first node is a cluster of about 2-3 of each of the following: RPI, arduino, beagle board, Xes and any other cool SBC like the asus or asrock ones.\'a0\
\
this cluster is specifically for text based html pages, email, \'a0maybe some basic gaming and programming (html based) and as a cluster these computers are good enough for some audio production\
\
the second cluster is for audio. Now this one is a bit tough because I don\'92t know all the specifics of audio cards the way you produce them. If you can move to multi core audio cards great, if not it\'92s fine, and some people can be doing audio production on the pi\'92s under the framework if i understand this all correctly. So one or two ultra low end single cpu mobo\'92s with any random combination of audio cards (refurbished of course)\
\
you have to update jack, here\'92s where i am confused, jack seems to support unlimited polyphonics, so you may be able to have multiple clients doing digital audio (such as sending a guitar that was inputed on their laptop to this node and having it processed and recorded on the node) on the same card, we will stick with this framework for now because i\'92ll show you how to optimize the compilers without actually doing any work later. and then just allocating ram super dynamically\
\
GPU\'92s are on their own MOBO, and those again are all random price from 30-150 dollar GPU\'92s. This MOBO i thought should be a dual CPU MOBO with 128GB RAM or so. This is the access point I think for the cluster. However, You do not need GPU\'92s running in SLI. there is a workaround where basically you virtualize an OS and allocate Video RAM as needed. For the workaround to SLI or Crossfire, it depends. I will  do it using two GPU\'92s with different Cores, ram speed, cache size, etcetera. To work around the speed differences and stuff you load the faster GPU with 100 or 200 processes and then load the second GPU with 50-85 processes (I\'92ll mess around with the framework later) and then basically you read what is on the slow GPU, write it to a file much like VRAM is done in a virtual box, and then execute that file (IO) on the faster GPU when the time is correct) Virtual Audio cards on the CPU and Virtual Audio registers can be done under the simple virtual box framework. This node, however, must be water-cooled because you will be running 8-10 GPUs and you can even execute the IO on the processor and speed up the GPU even more. \
\
and then from there, you can have almost an infinite number of X sessions running at the same time on you know 500 dollars worth of GPU\'92s\
\
and then the final node is a 2 processor (relatively fast), and it basically just has clamav or a combination of clam and comodo free av and it should just do av.\
\
The background processes of your computers, which i mean this to say, the processes that the computer uses to keep it\'92s cores and threads busy, you can change them and do so much shit it\'92s a joke. (I\'92ll show you how to compress the data into tiny maybe few k packets later)\
\
you can have it do the math for rendering random types of scenes in blender, k3d, you can have it actually render and play video games in the background and store some of the data to files to speed up game execution time, and you can even have it search the internet for codes, run those codes in a sandbox, test the results in a sandbox, perform benchmarks on the code in a sandbox and deploy code to speed up the computer silently in the background. you can also have it try and convert complex physics equations and laws and trajectory math into simple processes like bit shifts, if, else, loops with bit shifts, NAND and XOR and compare the results until it is satisfied that the results are within a few 1/10ths of a percent of the real thing. \
\
you can also have it search for surfboard designs, plane designs, engine designs, and can even make its own engine designs and documents based on known information that is searches for on google like airflow, waterlfow physics etcetera, and the computer can even come up with potential new games based on games and things it sees on the internet. \
\
and it can make the drawings stored as templates for people to look at, and it can even store wood, metal, rubber and plastic physics so that people can design a piece of hardware in blender or k3d and just type into a box what that piece of hardware is designed for, and the computer can optimize the build in every way shape or form and i bet it won\'92t take but 24 hours to get 10000 results.\
\
and then the computer can come up with it\'92s own compression and extraction methods, test them in a sandbox and implement them when they are at 100% efficiency. so like the computer will just compress a little bit of data, and then search for more ways to compress, and then compress that little bit of data more and more and more until its like 5 kbytes. the compression methods to test are math based, loop and bit shift and and and or based, or any other type of compression you can think of. \
\
it should even be able to browse the internet, look at source code, debug it, and commit the code to github or whatever and update synaptic automatically, just in the background as a silent process whenever the computer happens to be on. \
\
however, I will refuse to install all of the nonsensical amounts of software it takes to build this thing, so a framework for net booting, you all can figure out how to install the software on to the boards at once. \
\
and then this software can make recommendations to the user of free software and cheap hardware to purchase. \
\
if you decide to do it do it, I will come up with ways to design rooms for better airflow and heat transfer\
\
I thought you could build these into the walls of cars and boats and use satellite, and 4g for wifi access and if you download and compress small bits of videos and websites and link the downloaded parts correctly, you can reduce latency and execution time of anything on the net\
\
so you first download things like background colors, fonts, and thumbnails and a few colors, and compress it and then when you go back to that website you are downloading less unless they updated that part in which case you redownload it, replace the old one, and boom. with games like GTA same thing, that map never changes, so download parts of it and store them in a manner that simply lets it be IO data and then boom, it makes it so that you end up needing less and less and less to execute the same software as time goes by!\
\
}